#version 460
#extension GL_ARB_shading_language_include : require  // enable include

#include "utils/setup.glsl"  // setup bindings and push constants
#include "utils/coordinates.glsl"

void main() {
    // IMAGE DATA
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(outImage);
   
    // PUSH CONSTANTS
    float time     = pc.data1.x;
    float aspect   = pc.data1.y;
    vec2  mouse    = pc.data1.zw;
    vec3  col1     = pc.data2.rgb;
    vec3  col2     = pc.data3.rgb;
    vec3  col3     = pc.data4.rgb;
    float N        = pc.data4.w;

    // DEFAULT VALUES
    col1 = (col1 == vec3(0.0)) ? vec3(0.957, 0.510, 1.000) : col1;
    col2 = (col2 == vec3(0.0)) ? vec3(0.299, 1.000, 0.979) : col2;
    col3 = (col3 == vec3(0.0)) ? vec3(0.908, 0.902, 1.000) : col3;
    N = (N == 0) ? 1 : N * 255.0;

    // COORDS
    vec2 uv = vec2(float(texelCoord.x)/(size.x), float(texelCoord.y)/(size.y));
    uv.y = 1.0 - uv.y;  // flip y coordinate for standart setup

    vec2 uvAspect = vec2(uv.x * aspect, uv.y);

    mouse.x *= aspect;  // we need aspect ratio corrected mouse position to use it with aspect uv's

    // INITIAL COLOR
    vec3 col = vec3(0);

    // cells
    cellData cell = cellCoords((uvAspect * 2.0 - 1.0) * 5.0 * N, time * 0.1);
    cellData cell2 = cellCoords((uvAspect * 2.0 - 1.0) * 1.0 * N, time * 0.1);

    // cracks
    float cracs = smoothstep(0.05, 0.06, clamp01(cell.bd));
    col += mix(col1, col2, cell.id.y * 0.1 + 0.55) * cracs;

    // shadow
    col *= (smoothstep(0.1, 0.02, cell2.bd));

    // big cracks
    float bigCell = float(cell2.bd > 0.1);
    col = col3 * bigCell + col * (1.0 - bigCell);
    col += mix(col1, col2, cell.id.y * 0.1 + 0.55) * float(cell2.bd > 0.07) * float(cell2.bd < 0.1) * 0.4;


    imageStore(outImage, texelCoord, vec4(col, 1.0));
}