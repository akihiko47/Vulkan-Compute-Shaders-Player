#version 460
#extension GL_ARB_shading_language_include : require  // enable include


#include "utils/setup.glsl"  // setup bindings and push constants
#include "utils/coordinates.glsl"
#include "utils/sdfs.glsl"


vec2 rotateOnThes(in vec2 uv, in float i){
    if(i > 0.75){
        uv = rotate(uv, PI * 0.5);
    } else if(i > 0.5){
        uv = rotate(uv, PI);
    } else if(i > 0.25){
        uv = rotate(uv, -PI * 0.5);;
    }
    return uv;
}


void main() {
    // IMAGE DATA
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(outImage);
   
    // PUSH CONSTANTS
    float time     = pc.data1.x;
    float aspect   = pc.data1.y;
    float mixValue = pc.data2.x;
    vec2  mouse    = pc.data1.zw;
    vec3  col1     = pc.data2.rgb;
    vec3  col2     = pc.data3.rgb;
    float N        = pc.data4.x;

    // DEFAULT VALUES
    col1 = (col1 == vec3(0.0)) ? vec3(0.225, 0.617, 1.0) : col1;
    col2 = (col2 == vec3(0.0)) ? vec3(1.0, 1.0, 1.0) : col2;
    N = (N == 0.0) ? 10.0 : N * 255.0;

    // COORDS
    vec2 uv = vec2(float(texelCoord.x)/(size.x), float(texelCoord.y)/(size.y));
    uv.y = 1.0 - uv.y;  // flip y coordinate for standart setup

    vec2 uvAspect = vec2(uv.x * aspect, uv.y);

    mouse.x *= aspect;  // we need aspect ratio corrected mouse position to use it with aspect uv's

    vec2 uvs = uvAspect * N;

    float hor = (mod(floor(uvs.y), 2.0) == 0.0 ? 1.0 : 0.0);
    float ver = (mod(floor(uvs.x), 2.0) == 0.0 ? 1.0 : 0.0);

    vec2 uvMove = vec2(
        uvAspect.x + hor * (smoothstep(0.0, 1.0, mod(time, 8.0))       - smoothstep(2.0, 3.0, mod(time, 8.0))) * 0.4,
        uvAspect.y + ver * (smoothstep(0.0, 1.0, mod(time - 4.0, 8.0)) - smoothstep(2.0, 3.0, mod(time - 4.0, 8.0))) * 0.4
    );
    squareData sqr = squareCoords(uvMove * N);

    vec2 uv2 = (sqr.uv * 0.5 + 0.5) * 0.1 + sqr.id / N;

    // INITIAL COLOR
    vec3 col = vec3(0);

    // EDGES
    float edge = (clamp01(smoothstep(0.9, 0.91, abs(sqr.uv.x)) + smoothstep(0.9, 0.91, abs(sqr.uv.y))));
    col += edge * vec3(0);

    // LINES
    vec2 uvRot = rotateOnThes(sqr.uv, hash12(sqr.id)) * 0.5 + 0.5;
    float lines = ((step(length(uvRot), 0.6) - step(length(uvRot), 0.4)) + (step(length(uvRot - 1.0), 0.6) - step(length(uvRot -1.0), 0.4))) * (1.0 - edge);
    vec3 grad = mix(col1, col2, sqr.id.y / N);
    col += lines * grad.rgb;

    // RANDOM BRIGHTNESS
    float brightness = pow(hash12(sqr.id + time * 0.00003), 0.5);
    col *= brightness;

    // GLOW
    float glow = (clamp01(0.05 / (abs(sdCircle(uvRot, 0.5))) + clamp01(0.05 / abs(sdCircle(1.0 - uvRot, 0.5))))) * (1.0 - edge) * brightness;
    col += glow * grad;

    imageStore(outImage, texelCoord, vec4(col, 1.0));
}