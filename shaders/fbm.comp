#version 460
#extension GL_ARB_shading_language_include : require  // enable include


#include "utils/setup.glsl"  // setup bindings and push constants
#include "utils/noise.glsl"


#define OCTAVES 6
float fbm(vec2 uv){

    float value = 0.0;
    float amplitude = 0.5;

    for(int i = 0; i < OCTAVES; i++){
        value += amplitude * (gradnoise12(uv) * 0.5 + 0.5);
        uv *= 2.0;
        amplitude *= 0.5;
    }
    return value;
}


void main() {
    // IMAGE DATA
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(outImage);

    // PUSH CONSTANTS
    float time = pc.data1.x;
    float aspect = pc.data1.y;
    vec3  col1 = vec3(pc.data2.xyz);
    vec3  col2 = vec3(pc.data3.xyz);
    vec3  col3 = vec3(pc.data4.xyz);

    // DEFAULT VALUES
    col1 = (col1 == vec3(0.0)) ? vec3(0.07, 0.397, 0.272) : col1;
    col2 = (col2 == vec3(0.0)) ? vec3(1.0, 1.0, 1.0) : col2;
    col3 = (col3 == vec3(0.0)) ? vec3(0.234, 0.599, 0.599) : col3;

    // COORDS
    vec2 uv = vec2(float(texelCoord.x)/(size.x), float(texelCoord.y)/(size.y));
    vec2 uvAspect = vec2(uv.x * aspect, uv.y);
    vec2 p = uvAspect * 4.0;

    // INITIAL COLOR
    vec3 col = vec3(0.0);

    // NOISE
    // because fbm is 1 dimension, we need to displace p in two dimensions separately
    vec2 q;
    q.x = fbm(p + vec2(6.9, 0.0)) + (sin(time * 0.5)) * 0.08;
    q.y = fbm(p + vec2(5.2, 1.3)) + (cos(time * 0.3)) * 0.1;

    float nse = fbm(p + 4.0 * q);

    // COLOR
    col = mix(col1, col2, clamp(nse * nse * 2.5, 0, 1));
    col = mix(col,  col3, clamp(pow(length(q), 4.0), 0, 1));

    imageStore(outImage, texelCoord, vec4(pow(col, vec3(5.0)), 1.0));
}