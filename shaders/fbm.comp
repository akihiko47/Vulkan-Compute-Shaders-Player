#version 460

layout (local_size_x = 16, local_size_y = 16) in;

layout (rgba16f, set = 0, binding = 0) uniform writeonly image2D outImage;


layout( push_constant ) uniform constants {
    vec4 data1;
    vec4 data2;
    vec4 data3;
    vec4 data4;
} pc;


#define TWO_PI 6.28318530718
#define PI     3.14159265359



vec2 grad(ivec2 z){
    int n = z.x + z.y * 11111;

    n = (n << 13) ^ n;
    n = (n * (n * n * 15731 + 789221) + 1376312589) >> 16;

    n &= 7;
    vec2 gr = vec2(n & 1, n >> 1) * 2.0 - 1.0;
    return (n >= 6) ? vec2(0.0, gr.x) :
           (n >= 4) ? vec2(gr.x, 0.0) :
           gr;
}

float noise(vec2 p){
    ivec2 i = ivec2(floor(p));
    vec2 f = fract(p);

    vec2 u = f * f * (3.0 - 2.0 * f);

    return mix(mix(dot(grad(i + ivec2(0, 0)), f - vec2(0.0, 0.0)),
                   dot(grad(i + ivec2(1, 0)), f - vec2(1.0, 0.0)), u.x),
               mix(dot(grad(i + ivec2(0, 1)), f - vec2(0.0, 1.0)),
                   dot(grad(i + ivec2(1, 1)), f - vec2(1.0, 1.0)), u.x), u.y);
}

#define OCTAVES 6
float fbm(vec2 uv){

    float value = 0.0;
    float amplitude = 0.5;

    for(int i = 0; i < OCTAVES; i++){
        value += amplitude * (noise(uv) * 0.5 + 0.5);
        uv *= 2.0;
        amplitude *= 0.5;
    }
    return value;
}


void main() {
    // IMAGE DATA
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(outImage);

    // PUSH CONSTANTS
    float time = pc.data1.x;
    vec3  col1 = vec3(pc.data2.xyz);
    vec3  col2 = vec3(pc.data3.xyz);
    vec3  col3 = vec3(pc.data4.xyz);

    // COORDS
    vec2 uv = vec2(float(texelCoord.x)/(size.x), float(texelCoord.y)/(size.y));
    vec2 p = uv * 4.0;

    // BASE COLOR
    vec3 col = vec3(0.0);

    // NOISE
    // because fbm is 1 dimension, we need to displace p in two dimensions separately
    vec2 q;
    q.x = fbm(p + vec2(6.9, 0.0)) + (sin(time * 0.5)) * 0.08;
    q.y = fbm(p + vec2(5.2, 1.3)) + (cos(time * 0.3)) * 0.1;

    float nse = fbm(p + 4.0 * q);

    // COLOR
    col = mix(col1, col2, clamp(nse * nse * 2.5, 0, 1));
    col = mix(col,  col3, clamp(pow(length(q), 4.0), 0, 1));

    imageStore(outImage, texelCoord, vec4(pow(col, vec3(6.0)), 1.0));
}